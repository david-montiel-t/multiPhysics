# Application units
# Unit energy density = 1 MPa
# Unit length = 1 micron
# Unit time = 1 second 

# =================================================================================
# Set the number of dimensions (2 or 3 for a 2D or 3D calculation)
# =================================================================================
set Number of dimensions = 3

# =================================================================================
# Set the length of the domain in all three dimensions
# (Domain size Z ignored in 2D)
# =================================================================================
# Each axes spans from zero to the specified length
set Domain size X = 1.0
set Domain size Y = 1.0
set Domain size Z = 0.0625

# =================================================================================
# Set the element parameters
# =================================================================================
# The number of elements in each direction is 2^(refineFactor) * subdivisions
# Subdivisions Z ignored in 2D
# For optimal performance, use refineFactor primarily to determine the element size
set Subdivisions X = 32
set Subdivisions Y = 32
set Subdivisions Z = 2

set Refine factor = 0

# Set the polynomial degree of the element (allowed values: 1, 2, or 3)
set Element degree = 1

# =================================================================================
# Set the time step parameters
# =================================================================================
# The size of the time step
set Time step = 4.0e-08

# The simulation ends when either the number of time steps is reached or the
# simulation time is reached.
set Number of time steps = 3

# =================================================================================
# Set the output parameters
# =================================================================================
# Type of spacing between outputs ("EQUAL_SPACING", "LOG_SPACING", "N_PER_DECADE",
# or "LIST")
set Output condition = EQUAL_SPACING

# Number of times the program outputs the fields (total number for "EQUAL_SPACING"
# and "LOG_SPACING", number per decade for "N_PER_DECADE", ignored for "LIST")
set Number of outputs = 3

# Whether to print timing information every time the code outputs
set Print timing information with output = true

# The number of time steps between updates being printed to the screen
set Skip print steps = 1

set Number of checkpoints = 0

# =================================================================================
# Set the boundary conditions
# =================================================================================
# Set the boundary condition for each variable, where each variable is given by
# its name, as defined in equations.cc. The four boundary condition
# types are NATURAL, DIRICHLET, NON_UNIFORM_DIRICHLET and PERIODIC. If all
# of the boundaries have the same boundary condition, only one boundary condition
# type needs to be given. If multiple boundary condition types are needed, give a
# comma-separated list of the types. The order is the miniumum of x, maximum of x,
# minimum of y, maximum of y, minimum of z, maximum of z (i.e left, right, bottom,
# top in 2D and left, right, bottom, top, front, back in 3D). The value of a
# Dirichlet BC is specfied in the following way -- DIRCHILET: val -- where 'val' is
# the desired value. If the boundary condition is NON_UNIFORM_DIRICHLET, the
# boundary condition should be specified in the appropriate function in 'ICs_and_BCs.h'.
# Example 1: All periodic BCs for variable 'c'
# set Boundary condition for variable c = PERIODIC
# Example 2: Zero-derivative BCs on the left and right, Dirichlet BCs with value
# 1.5 on the top and bottom for variable 'n' in 2D
# set Boundary condition for variable n = NATURAL, NATURAL, DIRICHLET: 1.5, DIRICHLET: 1.5

set Boundary condition for variable n = NATURAL
set Boundary condition for variable dndt = NATURAL
set Boundary condition for variable strain_df = NATURAL

# =================================================================================
# Set the model constants
# =================================================================================
# Set the user-defined model constants, which must have a counter-part given in
# customPDE.h. These are most often used in the residual equations in equations.cc,
# but may also be used for initial conditions and nucleation calculations. The type
# options currently are DOUBLE, INT, BOOL, TENSOR, and [symmetry] ELASTIC CONSTANTS
# where [symmetry] is ISOTROPIC, TRANSVERSE, ORTHOTROPIC, or ANISOTROPIC.

# The mobility, L in equations.cpp
set Model constant L = 5000.0, DOUBLE

# The gradient energy coefficients
# In the twin plane reference plane
# ANISOTROPIC
# set Model constant Kij_tp = ((20.0,0),(0,1.0)), tensor
# ISOTROPIC
set Model constant Kij_tp = ((0.0764869,0,0),(0,0.0764869,0),(0,0,0.0764869)), tensor

# Twin energy barrier (double well height)
set Model constant delf_tw = 17.7, DOUBLE

# The rotation angle from the reference plane
# to the twin plane reference frame
set Model constant th = 0.753213, DOUBLE

# Unit lenght (in m)
set Model constant l0 = 1.0e-6, DOUBLE

# Radius of initial semimajor axis of the elliptical seed
set Model constant a0 = 0.25, DOUBLE

# eccentricity of the elliptical seed
set Model constant ecc = 0.95, DOUBLE